**************************Spring Framework***********************************************************************************************************
Major components of Spring
IOC:Giving control of creating an object for required classes to Spring framework for maintaining loosed coupling.[Remove dependency between classes]
Dependency Injection:Design pattern for creating this object
IOC Container:One who creates Object, maintains Bean life cycle.[Bean factory/Application context]
Bean:Any POJO java class controlled by Spring[Spring IOC] for creating Object based on XML or Annotations.Spring IOC manages these beans.
Context:Memory location where we add all objects created by Spring IOC.[Beans info will be stored]
Spell:Provides expression lang for quering and manipulating object at rutime like setting value, getting value, method invocation, property assignment,...

https://start.spring.io/

@SpringBootApplicatio:Tells class in main application class
@Controller:Tells the class is Controller class

M:Data layer
V:UI layer
C:Controller layer
Spring MVC

F1:Client->Tomcat->Dispatcher Servlet
F2:Dispatcher Servlet->Handler Mapping->Dispatcher Servlet
F3:Dispatcher Servlet->Controller->Dispatcher Servlet
F4:Dispatcher Servlet->View Resolver->Dispatcher Servlet
F5:Dispatcher Servlet->Tomcat->Client

F1:Client sends request for any specific resource through end pint to Server and it goes to Dispatcher Servlet
F2:Dispatcher Servlet calls Handler Mapping, HM see the URL and tells which method in which controller should be invoked
F3:Dispatcher Servlet invokes specific Controller told by HM, Controller process the request ad provide response[Static HTML View or Dynamic HTML View with dynamic content]
F4:Dispatcher Servlet invokes View resolver to convert dynamic[put all dynamic content data to html page] content provide by COntroller into HTML View and give back to Dispatcher Servlet
F5:Dispatcher Servlet give response to browser through Server

                                  Handler Mapping                     

Client <---> Tomcat Server <---> Dispatch Controller <---> Controller
             
                                   View Resolver

                               
                                 ****Spring MVC*****************

@Controller
-----------
Used for controller class

Ex:
@Controller
public class ContactController {
	
        @Autowired
	public ContactController(ContactService contactService) {
		this.contactService = contactService;
	}

	@GetMapping("/contact")
	public String displayContactPage() {
		return "contact.html";
	}


}

**************************Spring Framework***********************************************************************************************************

@Autowired
----------
Used to create Object by framework
Creates Object for ContactService class, we can directly use the reference to access memebrs of ContactService

@Controller
public class ContactController {

private final ContactService contactService;
	
        @Autowired
	public ContactController(ContactService contactService) {
		this.contactService = contactService;
	}

	@GetMapping("/contact")
	public String displayContactPage() {
		return "contact.html";
	}


}

**************************Spring Framework***********************************************************************************************************

@SpringBootApplication
----------------------
Used to indicate its main application

Ex:
@SpringBootApplication
public class SchoolAppApplication {

	public static void main(String[] args) {
		SpringApplication.run(SchoolAppApplication.class, args);

	}

}

**************************Spring Framework***********************************************************************************************************

@Configuration
---------------
To make class as configuration class

Ex:
@Configuration
public class WebConfig implements WebMvcConfigurer {

	@Override
	public void addViewControllers(ViewControllerRegistry registry) {
		registry.addViewController("/courses").setViewName("courses");
		registry.addViewController("/about").setViewName("about");
	}

}

**************************Spring Framework***********************************************************************************************************

@GetMapping/@PostMapping(value = "/saveMsg")/@RequestMapping(value = "/saveMsg",method=POST)
--------------------------------------------------------------------------------------------
To indicate type of method
Used inside Controller class

Ex:
	@GetMapping("/contact")
	public String displayContactPage() {
		return "contact.html";
	}

Ex:
@Controller
public class HomeController {

	@RequestMapping(value = { "", "/", "home" })
	public String displayHomePage() {
		// model.addAttribute("userName","Shivraj Rajkumar");
		return "home.html";
	}
}

**************************Spring Framework***********************************************************************************************************

@Service
--------
To indicate class is service class

Ex:
@Service
public class ContactService {

	private static Logger log = LoggerFactory.getLogger(ContactService.class);

	public boolean saveMessageDetails(Contact contact) {
		boolean isSaved = true;

		log.info("Name is: " + contact.getName());
		log.info("Mobile number is: " + contact.getMobileNum());
		log.info("Email is: " + contact.getEmail());
		log.info("Subject is: " + contact.getSubject());
		log.info("Message is: " + contact.getMessage());

		System.out.println(contact);
		return isSaved;

	}

}

**************************Spring Framework***********************************************************************************************************

Lombok
------
->Setup
  Add Lombok Dependency
  Install Lombok jar to STS folder
->Different Annotations

@Data @Getter @Setter @ToString @NoArgsConstructor @RequiredArgsConstructor @EqualsAndHashCode 

@Data: @Getter @Setter @ToString @RequiredArgsConstructor @EqualsAndHashCode 

To be added for Pojo Class, then all getter setter constructor toString will be added and can be used directly
If we declare variables as final then we need to use arg cont for initialization and we use @RequiredArgsConstructor or @Data annotation

Ex:
@Data
public class Contact {

	private String name;
	private String mobileNum;
	private String email;
	private String subject;
	private String message;

}

**************************Spring Framework***********************************************************************************************************
@Slf4j
------
To Create Logs using Lombok Library, Add @Slf4j annotaion and directly use lof ref var


import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class ContactService {

	//private static Logger log = LoggerFactory.getLogger(ContactService.class);

	public boolean saveMessageDetails(Contact contact) {
		boolean isSaved = true;

		log.info("Name is: " + contact.getName());
		log.info("Mobile number is: " + contact.getMobileNum());
		log.info("Email is: " + contact.getEmail());
		log.info("Subject is: " + contact.getSubject());
		log.info("Message is: " + contact.getMessage());

		System.out.println(contact);
		return isSaved;

	}

}
**************************Spring Framework***********************************************************************************************************
@RequestParam
-------------
Accepting Query or Form params from UI to backend
Parameter name and UI name attribute value should be same

	@PostMapping(value = "/saveMsg")
	public ModelAndView saveMessage(@RequestParam String name, @RequestParam String mobileNum) {

		log.info("Name is: " + name);
		log.info("Mobile number is: " + mobileNum);

		return new ModelAndView("redirect:/contact");
	}

Ex:
In Thymeleaf to send Query param
<li><a th:href="@{/holidays} (festival='true',federal='true')">Holidays</a></li>

